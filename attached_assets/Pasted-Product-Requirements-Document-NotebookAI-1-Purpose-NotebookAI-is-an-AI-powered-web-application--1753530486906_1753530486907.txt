Product Requirements Document: NotebookAI
1. üéØ Purpose
NotebookAI is an AI-powered web application designed to help users upload documents, ask questions, and interactively extract knowledge using an LLM. It functions as a personal research assistant, combining document management, semantic search, Q&A, summarization, and note organization.

2. üßë‚Äçüíª Target User
Students & researchers

Writers & journalists

Professionals analyzing documents (reports, contracts, etc.)

3. üß© Functional Requirements
3.1 Authentication
Login / Sign up with email or Google

Session management

3.2 Notebooks
Users can create, edit, rename, and delete notebooks

A notebook groups documents and related AI interactions

3.3 Document Management
Upload files (PDF, DOCX, TXT, Markdown)

Document parsing and embedding for semantic search

Preview text content of each document

3.4 Chat Assistant (Q&A)
Chat interface per notebook

AI responses based only on the notebook‚Äôs documents

Citations (referencing document names or paragraphs)

3.5 Notes
Save any chat reply as a note

Create manual notes with rich text editor

Edit/delete notes

Notes linked to source documents if generated by AI

3.6 Semantic Search
Search across document contents

Highlight matching sections in viewer

3.7 Exporting
Export notebook contents as Markdown or PDF

4. üì± UI Screens
4.1 Login / Signup Page
Email/Google login

Redirect to dashboard after auth

4.2 Dashboard
List of notebooks

Button: ‚ÄúCreate New Notebook‚Äù

Button: ‚ÄúDelete‚Äù or ‚ÄúRename‚Äù for each notebook

4.3 Notebook Page
Split screen layout:

Left Panel:
Document Manager

Upload document(s)

List of uploaded documents with:

Title

Delete

Preview

Center Panel:
Chat Assistant

User prompt input box

Response output (with citations)

‚ÄúSave as Note‚Äù button

Right Panel:
Notes

List of AI-generated or manual notes

Edit/Delete each note

Rich-text note editor

5. üóÉÔ∏è Database Schema
5.1 users
Field	Type	Description
id	UUID (PK)	User ID
email	String	User email
name	String	Display name
password_hash	String	Hashed password (if not OAuth)
created_at	Timestamp	Signup time

5.2 notebooks
Field	Type	Description
id	UUID (PK)	Notebook ID
user_id	UUID (FK)	Linked to users.id
title	String	Notebook title
created_at	Timestamp	Creation time

5.3 documents
Field	Type	Description
id	UUID (PK)	Document ID
notebook_id	UUID (FK)	Linked to notebooks.id
filename	String	Name of uploaded file
file_type	String	PDF / DOCX / TXT / MD
content	Text	Parsed raw text
embedding_id	String	Link to vector index (Chroma/FAISS)
created_at	Timestamp	Upload time

5.4 chat_history
Field	Type	Description
id	UUID (PK)	Chat entry ID
notebook_id	UUID (FK)	Linked to notebooks.id
user_prompt	Text	User input
ai_response	Text	AI‚Äôs full response (with citations)
metadata	JSON	Citation references, etc.
created_at	Timestamp	Time of interaction

5.5 notes
Field	Type	Description
id	UUID (PK)	Note ID
notebook_id	UUID (FK)	Linked to notebooks.id
content	Text	Rich-text or markdown content
source_type	Enum	manual or ai_generated
linked_chat_id	UUID (FK)	(Optional) Linked to chat_history
created_at	Timestamp	Note creation time

6. üß† AI System Design
6.1 Embedding + Retrieval
On document upload, split into chunks (e.g., 512 tokens)

Use OpenAI/HuggingFace embedding model

Store embeddings in vector DB (Chroma/FAISS/Pinecone)

6.2 RAG-based QA
On user question:

Embed the question

Perform vector similarity search over notebook's documents

Send top-k chunks + question to LLM (GPT-4, Claude, etc.)

Format response with inline citations

7. üì¶ Tech Stack
Layer	Tech
Frontend	React.js + Tailwind + shadcn/ui
Backend	Python (FastAPI or Flask)
Auth	Firebase Auth / Auth0 / Supabase Auth
Embedding	OpenAI / HuggingFace / BGE
Vector DB	Chroma / FAISS / Pinecone
Database	PostgreSQL or Supabase DB
LLM API	OpenAI GPT-4 / Claude / LM Studio
Deployment	Replit / Vercel / Hugging Face Spaces

8. üö¶ Development Plan (MVP)
Week 1‚Äì2:
Auth, Notebook creation, File upload

File parsing and preview

Week 3:
Embedding + vector store setup

RAG pipeline and basic Q&A

Week 4:
Notes interface, rich editor

Chat history + citations

Week 5:
Search + document highlighting

Export to PDF/Markdown

9. ‚úÖ Acceptance Criteria
Can create a notebook and upload documents

Can ask questions and get document-aware answers

Can save answers as notes

AI references source documents in responses

All data is scoped to the user

Clean, intuitive, responsive UI